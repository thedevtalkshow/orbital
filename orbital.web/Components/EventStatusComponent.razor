@using orbital.core.Models
@using orbital.core.Metadata
@using orbital.web.Services
@inject IMetadataService MetadataService

<div class="mb-3">
    <label for="eventStatus" class="form-label">Event Status</label>
    <select id="eventStatus" class="form-control" value="@Value" @onchange="OnStatusChanged">
        <option value="">--Select Status --</option>
        @if (eventStatuses != null)
        {
            @foreach (var status in eventStatuses)
            {
                <option value="@status.Value">@status.DisplayName</option>
            }
        }
    </select>

    @if (showPreviousDateField)
    {
        <div class="mt-2">
            <label for="previousStartDate" class="form-label">Previous Start Date</label>
            <Microsoft.AspNetCore.Components.Forms.InputDate id="previousStartDate" Type="InputDateType.DateTimeLocal" @bind-Value="PreviousStartDate" class="form-control" />
        </div>
    }
</div>

@code {
    private List<EventStatusDefinition> eventStatuses = null;
    private bool showPreviousDateField = false;

    [Parameter]
    public string Value {get; set;} = string.Empty;

    [Parameter]
    public EventCallback<string> ValueChanged {get; set;}
    
    [Parameter]
    public DateTime? PreviousStartDate {get; set;}

    [Parameter]
    public EventCallback<DateTime?> PreviousStartDateChanged {get; set;}
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var statusList = await MetadataService.GetMetadataItemsAsync<EventStatusDefinition>("eventStatus");
            eventStatuses = statusList.ToList();

            //check if we need to show previous date field based on current status.
            @* UpdatePreviousDateVisibility(Value); *@
        }
        catch (Exception ex)
        {
            throw;
        }
    }

    private async Task OnStatusChanged(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString() ?? string.Empty;

        //updated parent component with new value
        await ValueChanged.InvokeAsync(newValue);

        //Check if we need to show/hide the previous date field
        UpdatePreviousDateVisibility(newValue);
    }

    private void UpdatePreviousDateVisibility(string statusValue)
    {
        var selectedStatus = eventStatuses.FirstOrDefault(s => s.Value == statusValue);
        showPreviousDateField = selectedStatus?.RequiresPreviousStartDate ?? false;
        
        // If hiding the field and it has a value, clear it
        if (!showPreviousDateField && PreviousStartDate.HasValue)
        {
            PreviousStartDateChanged.InvokeAsync(null);
        }
    }
}